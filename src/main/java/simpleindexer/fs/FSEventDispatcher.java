package simpleindexer.fs;

import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.*;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;


/**
 * Dispatcher of {@link simpleindexer.fs.FSEvent} events, generated by {@link simpleindexer.fs.FSWatcher}.
 *
 * @author Ivan Arbuzov
 * 10/7/14.
 */
public class FSEventDispatcher<E extends FSEventListener> {

    private static final Logger log = LoggerFactory.getLogger(FSEventDispatcher.class);

    private final List<E> listeners = new CopyOnWriteArrayList<>();

    /**
     * Call corresponding to {@code event} method of all {@link FSEventListener}'s registered in
     * this dispatcher.
     *
     * @param event sent from {@link simpleindexer.fs.FSWatcher}
     * @throws IOException
     */
    public void dispatch(FSEvent event) throws IOException {
        for (E l : listeners) {
            Path eventRoot = event.getFullPath();
            log.debug(event.toString());
            if (event.isDelete()) {
                l.onDeleted(eventRoot);
            } else {
                if (event.isCreate()) {
                    if (Files.isRegularFile(eventRoot)) {
                        l.onFileCreated(eventRoot);
                    } else if (Files.isDirectory(eventRoot)) {
                        l.onDirectoryCreated(eventRoot);
                    } else {
                        log.warn("Path {} is neither file or directory. Skip it.", eventRoot);
                    }
                } else if (event.isModify()) {
                    if (Files.isRegularFile(eventRoot)) {
                        l.onFileModified(eventRoot);
                    } else if (Files.isDirectory(eventRoot)) {
                        l.onDirectoryModified(eventRoot);
                    } else {
                        log.warn("Path {} is neither file or directory. Skip it.", eventRoot);
                    }
                } else { // OVERFLOW
                    log.warn("OVERFLOW event. Skip it.");
                }
            }
        }
    }

    /**
     * Add listener to registered listeners.
     * @param listener to add
     */
    public void addListener(@NotNull E listener) {
        listeners.add(listener);
    }

    /**
     * Remove listener from registered listeners.
     * @param listener to remove
     */
    public void removeListener(@NotNull E listener) {
        listeners.remove(listener);
    }

}
